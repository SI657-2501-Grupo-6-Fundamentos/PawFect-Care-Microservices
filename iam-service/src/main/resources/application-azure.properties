spring.application.name=iam-service

# Spring DataSource Configuration
###    JDBC : SGDB :// HOST : PORT / DB
spring.datasource.url=${AZURE_IAM_DB}
spring.datasource.driver-class-name=org.postgresql.Driver

# Configuracion de JPA
#spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=false
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect

# JWT Configuration
authorization.jwt.secret=F-dsYg9omWotK3hD9cyXBwaA18Obr99cZQNjIEtgI18=
authorization.jwt.expiration.days=7

# Eureka Client Configuration
eureka.client.service-url.defaultZone=http://localhost:8090/eureka/
eureka.client.register-with-eureka=true
eureka.client.fetch-registry=true

# Google OAuth2 Configuration
spring.security.oauth2.client.registration.google.client-id=${GOOGLE_CLIENT_ID:943349664550-d4lnk7sa26hl4n8n0siq13e2n9gq6i3a.apps.googleusercontent.com}
spring.security.oauth2.client.registration.google.client-secret=${GOOGLE_CLIENT_SECRET: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}
spring.security.oauth2.client.registration.google.scope=openid,email,profile
spring.security.oauth2.client.registration.google.redirect-uri={baseUrl}/api/v1/auth/google/callback

spring.security.oauth2.client.provider.google.authorization-uri=https://accounts.google.com/o/oauth2/auth
spring.security.oauth2.client.provider.google.token-uri=https://oauth2.googleapis.com/token
spring.security.oauth2.client.provider.google.user-info-uri=https://www.googleapis.com/oauth2/v2/userinfo
spring.security.oauth2.client.provider.google.user-name-attribute=email

# Google OAuth2 Additional Configuration
google.oauth2.client-id=${GOOGLE_CLIENT_ID:943349664550-d4lnk7sa26hl4n8n0siq13e2n9gq6i3a.apps.googleusercontent.com}

# Port Configuration
server.port=8122